# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master
  - feature/*
pr: none

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '429e68d9-e49e-437c-a696-d306e0869bc1'

  # Environment name
  environmentName: 'DEVELOPMENT'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Provision
  displayName: Provision with Terraform
  jobs:
  - job: terraformdeploy
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: TerraformBackendVars
    steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '1.0.3'
      - script: |
          cd ./terraform
          terraform init \
              -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
              -backend-config="container_name=$TERRAFORM_CONTAINER_NAME" \
              -backend-config="key=$TERRAFORM_FILE_KEY" \
              -backend-config="sas_token=$SAS_TOKEN"
        failOnStderr: true
        displayName: Terraform Init
        env:
          STORAGE_ACCOUNT_NAME:     $(STORAGE_ACCOUNT_NAME)
          TERRAFORM_CONTAINER_NAME: $(TERRAFORM_CONTAINER_NAME)
          TERRAFORM_FILE_KEY:       $(TERRAFORM_FILE_KEY)
          SAS_TOKEN:                $(SAS_TOKEN)
      - task: AzureCLI@2
        name: terraform
        displayName: 'Terraform apply'
        inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
            $env:ARM_TENANT_ID       ??= $env:tenantId
            $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)

            $branchName = "$(Build.SourceBranchName)" -replace "/", "-"

            echo "Terraform workspace $branchName"
            if ($(terraform workspace list | grep -c "$branchName") -eq 0) {
              echo "Create new workspace $branchName"
              terraform workspace new "$branchName" -no-color
            } else {
              echo "Switch to workspace $branchName"
              terraform workspace select "$branchName" -no-color
            }

            terraform apply -auto-approve -input=false
            # Export Terraform output as task output
            $terraformOutput = terraform output -json | ConvertFrom-Json -AsHashtable
            foreach ($outputVariable in $terraformOutput.keys) {
                echo $outputVariable
                $value = $terraformOutput[$outputVariable].value
                echo $value
                if ($value) {
                    Write-Host "##vso[task.setvariable variable=$outputVariable;isOutput=true]$value"
                }
            }   
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: './terraform'
      - task: AzureCLI@2
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI'), in(variables['Build.SourceBranchName'], 'master'))
        displayName: Cleanup on every commit to master
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: pscore
          scriptLocation: inlineScript
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: './terraform'
          inlineScript: |
            $result = "$(Build.SourceVersionMessage)" | Select-String -Pattern "^Merge pull request #\d+ from .+\/feature\/(.+)"
            if ($result.matches.success) {
              $MERGED_BRANCH_NAME = $result.matches.groups[1]
              Write-Output "Merged branch name: '$MERGED_BRANCH_NAME'"

              if ($(terraform workspace list | grep -c "$MERGED_BRANCH_NAME") -eq 0) {
                Write-Output "Switch to workspace '$MERGED_BRANCH_NAME'"
                terraform workspace select "$MERGED_BRANCH_NAME"
                
                Write-Output "Destroying environment '$MERGED_BRANCH_NAME'"
                terraform destroy

                terraform workspace select master
                Write-Output "Deleting '$MERGED_BRANCH_NAME'"
                terraform workspace delete "$MERGED_BRANCH_NAME"
              }
            }

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Build
  - Provision
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    variables:
      - name: webAppName
        value: $[ stageDependencies.Provision.terraformdeploy.outputs['terraform.webAppName'] ]
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: '
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|14-lts'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm run start'

