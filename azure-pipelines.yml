# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '429e68d9-e49e-437c-a696-d306e0869bc1'

  # Web app name
  webAppName: 'terraform-env-per-branch-appservice'

  # Environment name
  environmentName: 'DEVELOPMENT'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Provision
  displayName: Provision with Terraform
  jobs:
  - deployment: 
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: TerraformBackendVars
      - group: TerraformServicePrincipalVars
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: '1.0.3'
          - script: |
              cd ./terraform
              terraform init \
                  -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
                  -backend-config="container_name=$TERRAFORM_CONTAINER_NAME" \
                  -backend-config="key=$TERRAFORM_FILE_KEY" \
                  -backend-config="sas_token=$SAS_TOKEN"
            failOnStderr: true
            displayName: Terraform Init
            env:
              STORAGE_ACCOUNT_NAME:     $(STORAGE_ACCOUNT_NAME)
              TERRAFORM_CONTAINER_NAME: $(TERRAFORM_CONTAINER_NAME)
              TERRAFORM_FILE_KEY:       $(TERRAFORM_FILE_KEY)
              SAS_TOKEN:                $(SAS_TOKEN)
          - script: |
              cd ./terraform
              terraform apply -auto-approve -input=false
                
            displayName: Terraform Apply
            failOnStderr: true
            env:
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_CLIENT_ID:       $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET:   $(ARM_CLIENT_SECRET)
              ARM_TENANT_ID:       $(ARM_TENANT_ID)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Build
  - Provision
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: '
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|12-lts'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm run start'