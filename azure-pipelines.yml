trigger:
  - master
  - feature/*
pr: none

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'c8a57e97-c12f-4a1a-bf49-5f21b3cad8b2'
  artifactName: 'WebApp'
  vmImageName: 'ubuntu-latest'
  buildConfiguration: 'Release'
  srcWorkingDir: '$(Build.SourcesDirectory)/src'
  terraformWorkingDir: '$(Build.SourcesDirectory)/terraform'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
      - script: dotnet build --configuration $(buildConfiguration)
        workingDirectory: $(srcWorkingDir)
        displayName: 'dotnet build'

      - script: dotnet publish --configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)
        displayName: 'dotnet publish'
        workingDirectory: $(srcWorkingDir)

      - publish: '$(Build.ArtifactStagingDirectory)'
        displayName: 'Publish artifact'
        artifact: $(artifactName)

- stage: Provision
  displayName: Provision with Terraform
  jobs:
  - job: terraformdeploy
    displayName: 'Terraform'
    pool:
      vmImage: $(vmImageName)
    variables:
      - group: TerraformBackendVars
    steps:
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '1.0.3'
      - script: |
          terraform init \
              -backend-config="storage_account_name=$storage_account_name" \
              -backend-config="sas_token=$sas_token"
        failOnStderr: true
        workingDirectory: $(terraformWorkingDir)
        displayName: Terraform Init
        env:
          storage_account_name:     $(storage_account_name)
          sas_token:                $(sas_token)

      - task: AzureCLI@2
        name: terraform
        displayName: 'Terraform apply'
        inputs:
          azureSubscription: '$(azureSubscription)'
          scriptType: pscore
          scriptPath: $(Build.SourcesDirectory)/deploy/terraform-apply.ps1
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: $(terraformWorkingDir)
          arguments: $(Build.SourceBranchName)

      - task: AzureCLI@2
        condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI'), in(variables['Build.SourceBranchName'], 'master'))
        displayName: Cleanup old environments on every commit to master
        inputs:
          azureSubscription: $(azureSubscription)
          scriptType: pscore
          scriptPath: $(Build.SourcesDirectory)/deploy/terraform-cleanup.ps1
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          powerShellIgnoreLASTEXITCODE: false
          workingDirectory: $(terraformWorkingDir)
          arguments: $(Build.SourceVersionMessage)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Build
  - Provision
  condition: succeeded()
  jobs:
  - job: Deploy
    variables:
      - name: webAppName
        value: $[ stageDependencies.Provision.terraformdeploy.outputs['terraform.webAppName'] ]
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download artifacts'
        inputs:
          buildType: 'current'
          artifact: $(artifactName)

      - task: AzureWebApp@1
        displayName: 'Azure Web App Deploy: '
        inputs:
          azureSubscription: $(azureSubscription)
          appType: webAppLinux
          appName: $(webAppName)
          runtimeStack: 'DOTNETCORE|5.0'
          package: $(Pipeline.Workspace)
